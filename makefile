#Compiler flags
DEBUG_FLAGS := -g -fsanitize=address
C_FLAGS := -Wall -Wextra -Wpedantic -Werror
RELEASE_FLAGS := -O3

#Libs
C_LIBS := -lxcb -lX11

#Input
SRC := src

#Output
RUN := fensterchef
OUT := out
RELEASE := release

#Find all source files
SOURCES := $(shell find $(SRC) -name '*.c')
#Get all corresponding object paths
OBJECTS := $(patsubst $(SRC)/%.c,$(OUT)/%.o,$(SOURCES))

#Get dependencies
DEPENDENCIES := $(patsubst %.o,%.d,$(OBJECTS))

#Include dependencies (.d files) generated by gcc
-include $(DEPENDENCIES)
#Build each object from corresponding source file
$(OUT)/%.o: $(SRC)/%.c
	mkdir -p $(dir $@)
	gcc $(DEBUG_FLAGS) $(C_FLAGS) -c $< -o $@ -MMD

#Build the main executable from all object files
$(OUT)/$(RUN): $(OBJECTS)
	mkdir -p $(dir $@)
	gcc $(DEBUG_FLAGS) $(C_FLAGS) $(OBJECTS) -o $@ $(C_LIBS)

#Functions
.PHONY:
build: $(OUT)/$(RUN)

.PHONY:
run: build
	Xephyr -br -ac -noreset -screen 800x600 :1 &
	# wait for x server to start
	sleep 1
	DISPLAY=:1 ./$(OUT)/$(RUN) &
	# wait for fensterchef to take control
	sleep 1
	DISPLAY=:1 alacritty &

.PHONY:
stop:
	pkill Xephyr

.PHONY:
release:
	mkdir -p $(RELEASE)
	gcc $(RELEASE_FLAGS) $(C_FLAGS) $(SOURCES) -o $(RELEASE)/$(RUN) $(C_LIBS)

.PHONY:
clean:
	rm -rf $(OUT)
	rm -rf $(RELEASE)
